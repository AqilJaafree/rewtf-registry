name: Validate Registry PR

on:
  pull_request_target:
    branches:
      - 'main'
    paths:
      - "registry.yaml"
    types: [opened, synchronize, reopened]

jobs:
  validate-registry:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install

      - name: Generate JWT and get access token
        id: get-access-token
        env:
          APP_ID: ${{ vars.APP_ID }}
          APP_PRIVATE_KEY: ${{ secrets.APP_PRIVATE_KEY }}
          INSTALLATION_ID: ${{ vars.INSTALLATION_ID }}
        run: |
          bun run scripts/bin/get-access-token.ts

      - name: Run registry validation
        id: validation
        run: |
          bun run validate-registry
          # Check if validation failed and exit with error code
          if [ -f "tmp/validation-result.json" ]; then
            if ! jq -e '.isValid == true' "tmp/validation-result.json" > /dev/null 2>&1; then
              echo "‚ùå Registry validation failed"
              exit 1
            fi
          else
            echo "‚ùå Validation result file not found"
            exit 1
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          REPO_OWNER: ${{ github.repository_owner }}
          REPO_NAME: ${{ github.event.repository.name }}

      - name: Comment PR
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const validationOutput = fs.readFileSync('tmp/validation-result.json', 'utf8');
            const result = JSON.parse(validationOutput);

            let comment = '';

            if (result.isValid) {
              comment = `## ‚úÖ Registry Validation Passed! üéâ
              
              Great job! Your registry entry has been validated successfully.
              
              **Validation Results:**
              - ‚úÖ All required fields are present
              - ‚úÖ GitHub handles are valid
              - ‚úÖ Repository URLs are accessible
              - ‚úÖ Repositories meet Flow ecosystem requirements
              - ‚úÖ Wallet addresses are properly formatted (if provided)
              - ‚úÖ X handles are valid (if provided)
              
              Your PR is ready for review! üöÄ`;
            } else {
              comment = `## ‚ùå Registry Validation Failed üòû
              
              Please fix the following issues before your PR can be merged:
              
              **Validation Errors:**
              ${result.errors.map(error => `- ‚ùå ${error}`).join('\n')}
              
              **Required Fields:**
              - \`name\`: Team/Project name
              - \`github\`: Array of valid GitHub usernames
              - \`repos\`: Array of accessible repository URLs that meet Flow ecosystem requirements
              
              **Flow Ecosystem Requirements (repos must meet ONE of these):**
              1. **"Built on Flow"**: Clearly state in README.md that it is built on Flow
              2. **Flow Components**: Include \`@onflow/fcl\`, \`@onflow/kit\`, Flow Go SDK, or Flow EVM endpoints
              
              **Optional Fields:**
              - \`wallets\`: Object with \`evm\` (0x + 40 hex chars) and \`flow\` (0x + 16 hex chars) addresses
              - \`x\`: Array of X (Twitter) handles
              
              Please update your registry entry and push the changes. üîß`;
            }

            // Check if we already commented on this PR
            const existingComments = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
            });

            // Find our bot comment (look for validation comments)
            const botComment = existingComments.data.find(comment => 
              comment.body && (
                comment.body.includes('## ‚úÖ Registry Validation Passed') ||
                comment.body.includes('## ‚ùå Registry Validation Failed')
              )
            );

            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                comment_id: botComment.id,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
              console.log('Updated existing validation comment');
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
              console.log('Created new validation comment');
            }
